{"name": "Отображение заказов пользователя", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"AppHeader_header__link__3D_hX\" href=\"/feed\">...</a> is not clickable at point (284, 28). Other element would receive the click: <path d=\"M29.425 29H21.361C20.4223 29 19.745 28.7867 19.329 28.36C19.0623 28.0827 18.8863 27.768 18.801 27.416C18.737 27.1813 18.705 26.8187 18.705 26.328V22.2H17.105V20.104H18.705V16.552H21.377V20.104H29.425V22.2H21.377V25.672C21.377 26.1627 21.489 26.4987 21.713 26.68C21.8943 26.8293 22.1983 26.904 22.625 26.904H29.425V29Z\" fill=\"white\"></path>\n  (Session info: chrome=129.0.6668.91)\nStacktrace:\n#0 0x56f8b3256f8a <unknown>\n#1 0x56f8b2f3d5e0 <unknown>\n#2 0x56f8b2f93866 <unknown>\n#3 0x56f8b2f9178d <unknown>\n#4 0x56f8b2f8f237 <unknown>\n#5 0x56f8b2f8e646 <unknown>\n#6 0x56f8b2f81a98 <unknown>\n#7 0x56f8b2fb1b22 <unknown>\n#8 0x56f8b2f81478 <unknown>\n#9 0x56f8b2fb1cee <unknown>\n#10 0x56f8b2fd0d7d <unknown>\n#11 0x56f8b2fb18c3 <unknown>\n#12 0x56f8b2f7f6b3 <unknown>\n#13 0x56f8b2f8068e <unknown>\n#14 0x56f8b322198b <unknown>\n#15 0x56f8b3225911 <unknown>\n#16 0x56f8b320e185 <unknown>\n#17 0x56f8b3226492 <unknown>\n#18 0x56f8b31f32ef <unknown>\n#19 0x56f8b3245e88 <unknown>\n#20 0x56f8b3246053 <unknown>\n#21 0x56f8b3255ddc <unknown>\n#22 0x7dd28d694ac3 <unknown>", "trace": "self = <pages.main_page.MainPage object at 0x7939c6d5ce20>\nlocator = ('xpath', \"//p[contains(text(), 'Лента Заказов')]/ancestor::a\")\ntimeout = 10\n\n    def click_to_element(self, locator, timeout=10):\n        WebDriverWait(self.driver, timeout).until(EC.element_to_be_clickable(locator))\n        try:\n>           self.driver.find_element(*locator).click()\n\npages/base_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7939c6d5ca60>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x56f8b3246053 \\\\u003Cunknown>\\\\n#21 0x56f8b3255ddc \\\\u003Cunknown>\\\\n#22 0x7dd28d694ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"AppHeader_header__link__3D_hX\" href=\"/feed\">...</a> is not clickable at point (284, 44). Other element would receive the click: <path d=\"M29.425 29H21.361C20.4223 29 19.745 28.7867 19.329 28.36C19.0623 28.0827 18.8863 27.768 18.801 27.416C18.737 27.1813 18.705 26.8187 18.705 26.328V22.2H17.105V20.104H18.705V16.552H21.377V20.104H29.425V22.2H21.377V25.672C21.377 26.1627 21.489 26.4987 21.713 26.68C21.8943 26.8293 22.1983 26.904 22.625 26.904H29.425V29Z\" fill=\"white\"></path>\nE         (Session info: chrome=129.0.6668.91)\nE       Stacktrace:\nE       #0 0x56f8b3256f8a <unknown>\nE       #1 0x56f8b2f3d5e0 <unknown>\nE       #2 0x56f8b2f93866 <unknown>\nE       #3 0x56f8b2f9178d <unknown>\nE       #4 0x56f8b2f8f237 <unknown>\nE       #5 0x56f8b2f8e646 <unknown>\nE       #6 0x56f8b2f81a98 <unknown>\nE       #7 0x56f8b2fb1b22 <unknown>\nE       #8 0x56f8b2f81478 <unknown>\nE       #9 0x56f8b2fb1cee <unknown>\nE       #10 0x56f8b2fd0d7d <unknown>\nE       #11 0x56f8b2fb18c3 <unknown>\nE       #12 0x56f8b2f7f6b3 <unknown>\nE       #13 0x56f8b2f8068e <unknown>\nE       #14 0x56f8b322198b <unknown>\nE       #15 0x56f8b3225911 <unknown>\nE       #16 0x56f8b320e185 <unknown>\nE       #17 0x56f8b3226492 <unknown>\nE       #18 0x56f8b31f32ef <unknown>\nE       #19 0x56f8b3245e88 <unknown>\nE       #20 0x56f8b3246053 <unknown>\nE       #21 0x56f8b3255ddc <unknown>\nE       #22 0x7dd28d694ac3 <unknown>\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_feed_page.TestFeedPage object at 0x7939c60a7d00>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bc67f089fe1d4f1528366db03b6feae0\")>\n\n>   ???\n\nD:\\Work\\Sprint_7\\tests\\test_feed_page.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/main_page.py:26: in click_orders_feed_button\n    self.click_to_element(MainPageLocators.ORDERS_FEED_BUTTON)\npages/base_page.py:25: in click_to_element\n    element.click()\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7939c6d5ca60>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x56f8b3246053 \\\\u003Cunknown>\\\\n#21 0x56f8b3255ddc \\\\u003Cunknown>\\\\n#22 0x7dd28d694ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"AppHeader_header__link__3D_hX\" href=\"/feed\">...</a> is not clickable at point (284, 28). Other element would receive the click: <path d=\"M29.425 29H21.361C20.4223 29 19.745 28.7867 19.329 28.36C19.0623 28.0827 18.8863 27.768 18.801 27.416C18.737 27.1813 18.705 26.8187 18.705 26.328V22.2H17.105V20.104H18.705V16.552H21.377V20.104H29.425V22.2H21.377V25.672C21.377 26.1627 21.489 26.4987 21.713 26.68C21.8943 26.8293 22.1983 26.904 22.625 26.904H29.425V29Z\" fill=\"white\"></path>\nE         (Session info: chrome=129.0.6668.91)\nE       Stacktrace:\nE       #0 0x56f8b3256f8a <unknown>\nE       #1 0x56f8b2f3d5e0 <unknown>\nE       #2 0x56f8b2f93866 <unknown>\nE       #3 0x56f8b2f9178d <unknown>\nE       #4 0x56f8b2f8f237 <unknown>\nE       #5 0x56f8b2f8e646 <unknown>\nE       #6 0x56f8b2f81a98 <unknown>\nE       #7 0x56f8b2fb1b22 <unknown>\nE       #8 0x56f8b2f81478 <unknown>\nE       #9 0x56f8b2fb1cee <unknown>\nE       #10 0x56f8b2fd0d7d <unknown>\nE       #11 0x56f8b2fb18c3 <unknown>\nE       #12 0x56f8b2f7f6b3 <unknown>\nE       #13 0x56f8b2f8068e <unknown>\nE       #14 0x56f8b322198b <unknown>\nE       #15 0x56f8b3225911 <unknown>\nE       #16 0x56f8b320e185 <unknown>\nE       #17 0x56f8b3226492 <unknown>\nE       #18 0x56f8b31f32ef <unknown>\nE       #19 0x56f8b3245e88 <unknown>\nE       #20 0x56f8b3246053 <unknown>\nE       #21 0x56f8b3255ddc <unknown>\nE       #22 0x7dd28d694ac3 <unknown>\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException"}, "steps": [{"name": "Авторизация", "status": "passed", "start": 1728420127210, "stop": 1728420127588}, {"name": "Авторизация пользователя", "status": "passed", "start": 1728420127588, "stop": 1728420128406}, {"name": "Добавление ингредиента в заказ", "status": "passed", "start": 1728420128406, "stop": 1728420129088}, {"name": "Оформление заказа", "status": "passed", "start": 1728420129088, "stop": 1728420129300}, {"name": "Закрытие попапа с заказом", "status": "passed", "start": 1728420129301, "stop": 1728420133701}, {"name": "Клик на кнопку \"Личный кабинет\" в шапке главной", "status": "passed", "start": 1728420133701, "stop": 1728420133969}, {"name": "Переход в раздел \"История заказов\"", "status": "passed", "start": 1728420133969, "stop": 1728420134806}, {"name": "Получение заказов", "status": "passed", "start": 1728420134806, "stop": 1728420143182}, {"name": "Клик на \"Лента заказов\"", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"AppHeader_header__link__3D_hX\" href=\"/feed\">...</a> is not clickable at point (284, 28). Other element would receive the click: <path d=\"M29.425 29H21.361C20.4223 29 19.745 28.7867 19.329 28.36C19.0623 28.0827 18.8863 27.768 18.801 27.416C18.737 27.1813 18.705 26.8187 18.705 26.328V22.2H17.105V20.104H18.705V16.552H21.377V20.104H29.425V22.2H21.377V25.672C21.377 26.1627 21.489 26.4987 21.713 26.68C21.8943 26.8293 22.1983 26.904 22.625 26.904H29.425V29Z\" fill=\"white\"></path>\n  (Session info: chrome=129.0.6668.91)\nStacktrace:\n#0 0x56f8b3256f8a <unknown>\n#1 0x56f8b2f3d5e0 <unknown>\n#2 0x56f8b2f93866 <unknown>\n#3 0x56f8b2f9178d <unknown>\n#4 0x56f8b2f8f237 <unknown>\n#5 0x56f8b2f8e646 <unknown>\n#6 0x56f8b2f81a98 <unknown>\n#7 0x56f8b2fb1b22 <unknown>\n#8 0x56f8b2f81478 <unknown>\n#9 0x56f8b2fb1cee <unknown>\n#10 0x56f8b2fd0d7d <unknown>\n#11 0x56f8b2fb18c3 <unknown>\n#12 0x56f8b2f7f6b3 <unknown>\n#13 0x56f8b2f8068e <unknown>\n#14 0x56f8b322198b <unknown>\n#15 0x56f8b3225911 <unknown>\n#16 0x56f8b320e185 <unknown>\n#17 0x56f8b3226492 <unknown>\n#18 0x56f8b31f32ef <unknown>\n#19 0x56f8b3245e88 <unknown>\n#20 0x56f8b3246053 <unknown>\n#21 0x56f8b3255ddc <unknown>\n#22 0x7dd28d694ac3 <unknown>\n\n", "trace": "  File \"/home/test/Desktop/sprint_7/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/test/Desktop/sprint_7/pages/main_page.py\", line 26, in click_orders_feed_button\n    self.click_to_element(MainPageLocators.ORDERS_FEED_BUTTON)\n  File \"/home/test/Desktop/sprint_7/pages/base_page.py\", line 25, in click_to_element\n    element.click()\n  File \"/home/test/Desktop/sprint_7/venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/home/test/Desktop/sprint_7/venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 394, in _execute\n    return self._parent.execute(command, params)\n  File \"/home/test/Desktop/sprint_7/venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/home/test/Desktop/sprint_7/venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1728420143182, "stop": 1728420148683}], "start": 1728420127209, "stop": 1728420148684, "uuid": "60389918-6f9d-4cd1-90ce-bf98ccdd3de1", "historyId": "19a1a07e9ba6d0e2a41e29a66a01e9ca", "testCaseId": "19a1a07e9ba6d0e2a41e29a66a01e9ca", "fullName": "tests.test_feed_page.TestFeedPage#test_click_ingredient", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_feed_page"}, {"name": "subSuite", "value": "TestFeedPage"}, {"name": "host", "value": "test-virtual-machine"}, {"name": "thread", "value": "12014-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_feed_page"}]}