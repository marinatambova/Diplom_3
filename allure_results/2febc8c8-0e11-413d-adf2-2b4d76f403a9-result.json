{"name": "Открытие всплывающего окна заказа с деталями", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"AppHeader_header__link__3D_hX\" href=\"/feed\">...</a> is not clickable at point (284, 28). Other element would receive the click: <path d=\"M2.8 25.544C1.968 25.544 1.29067 25.304 0.768 24.824C0.256 24.3333 0 23.672 0 22.84C0 21.7413 0.432 20.9467 1.296 20.456C1.712 20.2213 2.21333 20.104 2.8 20.104H14.128V22.2H3.328C2.74133 22.2 2.448 22.424 2.448 22.872C2.448 23.32 2.74133 23.544 3.328 23.544L11.808 23.56C12.64 23.56 13.312 23.8053 13.824 24.296C14.3467 24.7867 14.608 25.448 14.608 26.28C14.608 27.4 14.176 28.1947 13.312 28.664C12.9067 28.888 12.4053 29 11.808 29H0V26.904L11.28 26.92C11.8667 26.92 12.16 26.6907 12.16 26.232C12.16 25.784 11.8667 25.56 11.28 25.56L2.8 25.544Z\" fill=\"white\"></path>\n  (Session info: chrome=129.0.6668.91)\nStacktrace:\n#0 0x5a1cd378af8a <unknown>\n#1 0x5a1cd34715e0 <unknown>\n#2 0x5a1cd34c7866 <unknown>\n#3 0x5a1cd34c578d <unknown>\n#4 0x5a1cd34c3237 <unknown>\n#5 0x5a1cd34c2646 <unknown>\n#6 0x5a1cd34b5a98 <unknown>\n#7 0x5a1cd34e5b22 <unknown>\n#8 0x5a1cd34b5478 <unknown>\n#9 0x5a1cd34e5cee <unknown>\n#10 0x5a1cd3504d7d <unknown>\n#11 0x5a1cd34e58c3 <unknown>\n#12 0x5a1cd34b36b3 <unknown>\n#13 0x5a1cd34b468e <unknown>\n#14 0x5a1cd375598b <unknown>\n#15 0x5a1cd3759911 <unknown>\n#16 0x5a1cd3742185 <unknown>\n#17 0x5a1cd375a492 <unknown>\n#18 0x5a1cd37272ef <unknown>\n#19 0x5a1cd3779e88 <unknown>\n#20 0x5a1cd377a053 <unknown>\n#21 0x5a1cd3789ddc <unknown>\n#22 0x7eedcc494ac3 <unknown>", "trace": "self = <pages.main_page.MainPage object at 0x7939c60ce740>\nlocator = ('xpath', \"//p[contains(text(), 'Лента Заказов')]/ancestor::a\")\ntimeout = 10\n\n    def click_to_element(self, locator, timeout=10):\n        WebDriverWait(self.driver, timeout).until(EC.element_to_be_clickable(locator))\n        try:\n>           self.driver.find_element(*locator).click()\n\npages/base_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7939c60cdc90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5a1cd377a053 \\\\u003Cunknown>\\\\n#21 0x5a1cd3789ddc \\\\u003Cunknown>\\\\n#22 0x7eedcc494ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"AppHeader_header__link__3D_hX\" href=\"/feed\">...</a> is not clickable at point (284, 44). Other element would receive the click: <path d=\"M2.8 25.544C1.968 25.544 1.29067 25.304 0.768 24.824C0.256 24.3333 0 23.672 0 22.84C0 21.7413 0.432 20.9467 1.296 20.456C1.712 20.2213 2.21333 20.104 2.8 20.104H14.128V22.2H3.328C2.74133 22.2 2.448 22.424 2.448 22.872C2.448 23.32 2.74133 23.544 3.328 23.544L11.808 23.56C12.64 23.56 13.312 23.8053 13.824 24.296C14.3467 24.7867 14.608 25.448 14.608 26.28C14.608 27.4 14.176 28.1947 13.312 28.664C12.9067 28.888 12.4053 29 11.808 29H0V26.904L11.28 26.92C11.8667 26.92 12.16 26.6907 12.16 26.232C12.16 25.784 11.8667 25.56 11.28 25.56L2.8 25.544Z\" fill=\"white\"></path>\nE         (Session info: chrome=129.0.6668.91)\nE       Stacktrace:\nE       #0 0x5a1cd378af8a <unknown>\nE       #1 0x5a1cd34715e0 <unknown>\nE       #2 0x5a1cd34c7866 <unknown>\nE       #3 0x5a1cd34c578d <unknown>\nE       #4 0x5a1cd34c3237 <unknown>\nE       #5 0x5a1cd34c2646 <unknown>\nE       #6 0x5a1cd34b5a98 <unknown>\nE       #7 0x5a1cd34e5b22 <unknown>\nE       #8 0x5a1cd34b5478 <unknown>\nE       #9 0x5a1cd34e5cee <unknown>\nE       #10 0x5a1cd3504d7d <unknown>\nE       #11 0x5a1cd34e58c3 <unknown>\nE       #12 0x5a1cd34b36b3 <unknown>\nE       #13 0x5a1cd34b468e <unknown>\nE       #14 0x5a1cd375598b <unknown>\nE       #15 0x5a1cd3759911 <unknown>\nE       #16 0x5a1cd3742185 <unknown>\nE       #17 0x5a1cd375a492 <unknown>\nE       #18 0x5a1cd37272ef <unknown>\nE       #19 0x5a1cd3779e88 <unknown>\nE       #20 0x5a1cd377a053 <unknown>\nE       #21 0x5a1cd3789ddc <unknown>\nE       #22 0x7eedcc494ac3 <unknown>\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_feed_page.TestFeedPage object at 0x7939c60a7dc0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f9fe65dbbfa685a9c4f89639a108e2c4\")>\n\n>   ???\n\nD:\\Work\\Sprint_7\\tests\\test_feed_page.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/main_page.py:26: in click_orders_feed_button\n    self.click_to_element(MainPageLocators.ORDERS_FEED_BUTTON)\npages/base_page.py:25: in click_to_element\n    element.click()\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7939c60cdc90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5a1cd377a053 \\\\u003Cunknown>\\\\n#21 0x5a1cd3789ddc \\\\u003Cunknown>\\\\n#22 0x7eedcc494ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"AppHeader_header__link__3D_hX\" href=\"/feed\">...</a> is not clickable at point (284, 28). Other element would receive the click: <path d=\"M2.8 25.544C1.968 25.544 1.29067 25.304 0.768 24.824C0.256 24.3333 0 23.672 0 22.84C0 21.7413 0.432 20.9467 1.296 20.456C1.712 20.2213 2.21333 20.104 2.8 20.104H14.128V22.2H3.328C2.74133 22.2 2.448 22.424 2.448 22.872C2.448 23.32 2.74133 23.544 3.328 23.544L11.808 23.56C12.64 23.56 13.312 23.8053 13.824 24.296C14.3467 24.7867 14.608 25.448 14.608 26.28C14.608 27.4 14.176 28.1947 13.312 28.664C12.9067 28.888 12.4053 29 11.808 29H0V26.904L11.28 26.92C11.8667 26.92 12.16 26.6907 12.16 26.232C12.16 25.784 11.8667 25.56 11.28 25.56L2.8 25.544Z\" fill=\"white\"></path>\nE         (Session info: chrome=129.0.6668.91)\nE       Stacktrace:\nE       #0 0x5a1cd378af8a <unknown>\nE       #1 0x5a1cd34715e0 <unknown>\nE       #2 0x5a1cd34c7866 <unknown>\nE       #3 0x5a1cd34c578d <unknown>\nE       #4 0x5a1cd34c3237 <unknown>\nE       #5 0x5a1cd34c2646 <unknown>\nE       #6 0x5a1cd34b5a98 <unknown>\nE       #7 0x5a1cd34e5b22 <unknown>\nE       #8 0x5a1cd34b5478 <unknown>\nE       #9 0x5a1cd34e5cee <unknown>\nE       #10 0x5a1cd3504d7d <unknown>\nE       #11 0x5a1cd34e58c3 <unknown>\nE       #12 0x5a1cd34b36b3 <unknown>\nE       #13 0x5a1cd34b468e <unknown>\nE       #14 0x5a1cd375598b <unknown>\nE       #15 0x5a1cd3759911 <unknown>\nE       #16 0x5a1cd3742185 <unknown>\nE       #17 0x5a1cd375a492 <unknown>\nE       #18 0x5a1cd37272ef <unknown>\nE       #19 0x5a1cd3779e88 <unknown>\nE       #20 0x5a1cd377a053 <unknown>\nE       #21 0x5a1cd3789ddc <unknown>\nE       #22 0x7eedcc494ac3 <unknown>\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException"}, "steps": [{"name": "Клик на \"Лента заказов\"", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"AppHeader_header__link__3D_hX\" href=\"/feed\">...</a> is not clickable at point (284, 28). Other element would receive the click: <path d=\"M2.8 25.544C1.968 25.544 1.29067 25.304 0.768 24.824C0.256 24.3333 0 23.672 0 22.84C0 21.7413 0.432 20.9467 1.296 20.456C1.712 20.2213 2.21333 20.104 2.8 20.104H14.128V22.2H3.328C2.74133 22.2 2.448 22.424 2.448 22.872C2.448 23.32 2.74133 23.544 3.328 23.544L11.808 23.56C12.64 23.56 13.312 23.8053 13.824 24.296C14.3467 24.7867 14.608 25.448 14.608 26.28C14.608 27.4 14.176 28.1947 13.312 28.664C12.9067 28.888 12.4053 29 11.808 29H0V26.904L11.28 26.92C11.8667 26.92 12.16 26.6907 12.16 26.232C12.16 25.784 11.8667 25.56 11.28 25.56L2.8 25.544Z\" fill=\"white\"></path>\n  (Session info: chrome=129.0.6668.91)\nStacktrace:\n#0 0x5a1cd378af8a <unknown>\n#1 0x5a1cd34715e0 <unknown>\n#2 0x5a1cd34c7866 <unknown>\n#3 0x5a1cd34c578d <unknown>\n#4 0x5a1cd34c3237 <unknown>\n#5 0x5a1cd34c2646 <unknown>\n#6 0x5a1cd34b5a98 <unknown>\n#7 0x5a1cd34e5b22 <unknown>\n#8 0x5a1cd34b5478 <unknown>\n#9 0x5a1cd34e5cee <unknown>\n#10 0x5a1cd3504d7d <unknown>\n#11 0x5a1cd34e58c3 <unknown>\n#12 0x5a1cd34b36b3 <unknown>\n#13 0x5a1cd34b468e <unknown>\n#14 0x5a1cd375598b <unknown>\n#15 0x5a1cd3759911 <unknown>\n#16 0x5a1cd3742185 <unknown>\n#17 0x5a1cd375a492 <unknown>\n#18 0x5a1cd37272ef <unknown>\n#19 0x5a1cd3779e88 <unknown>\n#20 0x5a1cd377a053 <unknown>\n#21 0x5a1cd3789ddc <unknown>\n#22 0x7eedcc494ac3 <unknown>\n\n", "trace": "  File \"/home/test/Desktop/sprint_7/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/test/Desktop/sprint_7/pages/main_page.py\", line 26, in click_orders_feed_button\n    self.click_to_element(MainPageLocators.ORDERS_FEED_BUTTON)\n  File \"/home/test/Desktop/sprint_7/pages/base_page.py\", line 25, in click_to_element\n    element.click()\n  File \"/home/test/Desktop/sprint_7/venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/home/test/Desktop/sprint_7/venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 394, in _execute\n    return self._parent.execute(command, params)\n  File \"/home/test/Desktop/sprint_7/venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/home/test/Desktop/sprint_7/venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1728420114914, "stop": 1728420120456}], "start": 1728420114913, "stop": 1728420120460, "uuid": "1b44ad0f-da6d-4776-b363-3fa109613a72", "historyId": "cc1d2a09038b0038a9cfbbe9913088be", "testCaseId": "cc1d2a09038b0038a9cfbbe9913088be", "fullName": "tests.test_feed_page.TestFeedPage#test_click_orders_feed", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_feed_page"}, {"name": "subSuite", "value": "TestFeedPage"}, {"name": "host", "value": "test-virtual-machine"}, {"name": "thread", "value": "12014-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_feed_page"}]}